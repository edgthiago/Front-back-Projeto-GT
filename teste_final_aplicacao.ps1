#!/usr/bin/env pwsh

# Script de Teste Final - Verifica√ß√£o Completa da Aplica√ß√£o
# Data: 4 de junho de 2025

Write-Host "üîç TESTE FINAL - APLICA√á√ÉO E-COMMERCE" -ForegroundColor Green
Write-Host "======================================" -ForegroundColor Green
Write-Host ""

# Fun√ß√£o para verificar se um processo est√° rodando
function Test-Process($processName) {
    return (Get-Process -Name $processName -ErrorAction SilentlyContinue) -ne $null
}

# Fun√ß√£o para testar uma URL
function Test-Url($url) {
    try {
        $response = Invoke-WebRequest -Uri $url -TimeoutSec 10 -ErrorAction Stop
        return $response.StatusCode -eq 200
    }
    catch {
        return $false
    }
}

# 1. Verificar estrutura do projeto
Write-Host "üìÅ 1. Verificando Estrutura do Projeto..." -ForegroundColor Yellow
$frontendPath = "c:\Users\edgle\Desktop\projetofgt\frontend"
$backendPath = "c:\Users\edgle\Desktop\projetofgt\backend"

if (Test-Path $frontendPath) {
    Write-Host "   ‚úÖ Frontend encontrado" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Frontend n√£o encontrado" -ForegroundColor Red
}

if (Test-Path $backendPath) {
    Write-Host "   ‚úÖ Backend encontrado" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Backend n√£o encontrado" -ForegroundColor Red
}

Write-Host ""

# 2. Verificar sintaxe dos arquivos principais
Write-Host "üîß 2. Verificando Sintaxe dos Arquivos..." -ForegroundColor Yellow

# Verificar backend
Push-Location $backendPath
try {
    $result = node -c servidor.js 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Backend: servidor.js - Sintaxe OK" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Backend: servidor.js - Erro de sintaxe" -ForegroundColor Red
        Write-Host "   $result" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Backend: Erro ao verificar sintaxe" -ForegroundColor Red
}
Pop-Location

# Verificar frontend (build)
Push-Location $frontendPath
try {
    Write-Host "   üì¶ Testando build do frontend..." -ForegroundColor Cyan
    $buildResult = npm run build 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Frontend: Build conclu√≠do com sucesso" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Frontend: Erro no build" -ForegroundColor Red
        Write-Host "   $buildResult" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Frontend: Erro ao executar build" -ForegroundColor Red
}
Pop-Location

Write-Host ""

# 3. Verificar depend√™ncias
Write-Host "üì¶ 3. Verificando Depend√™ncias..." -ForegroundColor Yellow

Push-Location $backendPath
if (Test-Path "node_modules") {
    Write-Host "   ‚úÖ Backend: node_modules presente" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Backend: node_modules n√£o encontrado - Execute: npm install" -ForegroundColor Yellow
}
Pop-Location

Push-Location $frontendPath
if (Test-Path "node_modules") {
    Write-Host "   ‚úÖ Frontend: node_modules presente" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Frontend: node_modules n√£o encontrado - Execute: npm install" -ForegroundColor Yellow
}
Pop-Location

Write-Host ""

# 4. Verificar corre√ß√µes espec√≠ficas
Write-Host "üõ†Ô∏è  4. Verificando Corre√ß√µes Aplicadas..." -ForegroundColor Yellow

$correcoes = @(
    @{
        Arquivo = "CardProduto.jsx"
        Caminho = "$frontendPath\src\components\CardProduto\CardProduto.jsx"
        Buscar = "Number(valor).toFixed(2)"
    },
    @{
        Arquivo = "PaginaDetalhesProduto.jsx"
        Caminho = "$frontendPath\src\pages\PaginaDetalhesProduto\PaginaDetalhesProduto.jsx"
        Buscar = "produto.id ?"
    },
    @{
        Arquivo = "CheckoutIntegrado.jsx"
        Caminho = "$frontendPath\src\components\checkout\CheckoutIntegrado.jsx"
        Buscar = "Number(totais.total).toFixed(2)"
    }
)

foreach ($correcao in $correcoes) {
    if (Test-Path $correcao.Caminho) {
        $conteudo = Get-Content $correcao.Caminho -Raw
        if ($conteudo -like "*$($correcao.Buscar)*") {
            Write-Host "   ‚úÖ $($correcao.Arquivo): Corre√ß√£o aplicada" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  $($correcao.Arquivo): Corre√ß√£o n√£o encontrada" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ùå $($correcao.Arquivo): Arquivo n√£o encontrado" -ForegroundColor Red
    }
}

Write-Host ""

# 5. Relat√≥rio final
Write-Host "üìä 5. Relat√≥rio Final" -ForegroundColor Yellow
Write-Host "=====================" -ForegroundColor Yellow

$relatorioPath = "c:\Users\edgle\Desktop\projetofgt\RELATORIO_CORRECOES_TOFIX_FINAL.md"
if (Test-Path $relatorioPath) {
    Write-Host "   ‚úÖ Relat√≥rio de corre√ß√µes criado" -ForegroundColor Green
    Write-Host "   üìÑ Local: $relatorioPath" -ForegroundColor Cyan
} else {
    Write-Host "   ‚ùå Relat√≥rio n√£o encontrado" -ForegroundColor Red
}

Write-Host ""

# 6. Pr√≥ximos passos
Write-Host "üöÄ PR√ìXIMOS PASSOS:" -ForegroundColor Green
Write-Host "===================" -ForegroundColor Green
Write-Host "1. Execute 'npm start' no frontend para testar a aplica√ß√£o" -ForegroundColor Cyan
Write-Host "2. Execute 'node servidor.js' no backend para iniciar a API" -ForegroundColor Cyan
Write-Host "3. Acesse http://localhost:3000 para testar a interface" -ForegroundColor Cyan
Write-Host "4. Teste as funcionalidades de carrinho e checkout" -ForegroundColor Cyan
Write-Host "5. Verifique se os pre√ßos est√£o sendo formatados corretamente" -ForegroundColor Cyan

Write-Host ""
Write-Host "‚úÖ TESTE CONCLU√çDO - Aplica√ß√£o pronta para uso!" -ForegroundColor Green

# Pausar para leitura
Read-Host "Pressione Enter para continuar"
